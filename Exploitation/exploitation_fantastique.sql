--EXERCICE: Exploitation de Donnees en SQL

--Question 01 

SELECT d.JDS, count(*) AS Qte
FROM f_dw_vente v,f_dw_date d
WHERE v.TICKET_DATE = d.TRADE_DATE
GROUP BY d.JDS
ORDER BY Qte DESC;



--Question 02

SELECT ROUND(avg(Qte))
FROM 
(
	SELECT d.JDS AS jds, COUNT(*) AS Qte
	FROM f_dw_vente v, f_dw_date d
	WHERE v.TICKET_DATE = d.TRADE_DATE
	GROUP BY jds
	ORDER BY Qte DESC
) 
WHERE jds <> 'saturday';


--Question 03

--Creation of view

CREATE OR REPLACE VIEW vente_jds(JDS, Qte)
AS
	SELECT d.JDS, count(*) AS Qte
	FROM f_dw_vente v,f_dw_date d
	WHERE v.TICKET_DATE = d.TRADE_DATE
	GROUP BY d.JDS
	ORDER BY Qte DESC;

CREATE OR REPLACE VIEW vente_moyen_hor_semadi(Moyen)
AS
	SELECT avg(Qte)
	FROM 
	(
		SELECT d.JDS AS jds, COUNT(*) AS Qte
		FROM f_dw_vente v, f_dw_date d
		WHERE v.TICKET_DATE = d.TRADE_DATE
		GROUP BY jds
		ORDER BY Qte DESC
	) 
	WHERE jds <> 'saturday';

CREATE OR REPLACE VIEW ratio_samedi_par_moyene(JDS,Ratio)
AS
(
  SELECT jds.JDS, (jds.Qte/hs.Moyen) AS moyen
  FROM vente_jds jds, vente_moyen_hor_semadi hs
  WHERE jds.JDS = 'saturday'
);


--Question 04 

SELECT m.Rayonnage, COUNT(*) AS Qte
FROM f_dw_vente v,f_dw_magasin m 
WHERE v.SHOP = m.Magasin_Id
GROUP BY m.Rayonnage;


SELECT m.Rayonnage, COUNT(*) AS nombre
FROM f_dw_magasin m
GROUP BY m.Rayonnage;



SELECT r1,Qte, nombre, ROUND(Qte/nombre) AS Ratio
FROM 
(SELECT m.Rayonnage AS r1, COUNT(*) AS Qte
FROM f_dw_vente v,f_dw_magasin m 
WHERE v.SHOP = m.Magasin_Id
GROUP BY m.Rayonnage),
(SELECT m.Rayonnage AS r2, COUNT(*) AS nombre
FROM f_dw_magasin m
GROUP BY m.Rayonnage
)
WHERE r1 = r2
ORDER BY Ratio DESC;


--Question 05

CREATE OR REPLACE VIEW Qte_Par_Semaine(Semaine, Qte)
AS
	SELECT d.SEMAINE, COUNT(*) AS Qte
	FROM f_dw_vente v, f_dw_date d
	WHERE v.TICKET_DATE = d.TRADE_DATE 
	GROUP BY d.SEMAINE
	ORDER BY d.SEMAINE;


SET echo off 
SET termout off
SET feedback off
SET heading off
SET PAGESIZE 0
SPOOL ./Results/venteParsem.csv
SELECT * FROM Qte_Par_Semaine;
SPOOL off



--EXERCICE EXPLOIATION DE DONNEES AVEC ORACLE ET OOo Calc

--Question 01

SELECT d.trimestre,d.mois,d.Trade_Date,COUNT(*) 
FROM f_dw_vente v, f_dw_date d
WHERE v.TICKET_DATE = d.TRADE_DATE
GROUP BY ROLLUP(d.trimestre,d.mois,d.Trade_date);

--Question 02

--Average sell quality for each book

SELECT ROUND(avg(Qte))
FROM
(
SELECT c.ISBN, COUNT(*) AS Qte
FROM f_dw_vente v, f_dw_catalogue c
WHERE v.Product = c.ISBN
GROUP BY c.ISBN
);

--The average number of sale is 342

SELECT c.ISBN, c.TITRE,COUNT(*) AS Qte
FROM f_dw_vente v, f_dw_catalogue c
WHERE v.Product = c.ISBN
GROUP BY c.ISBN,c.TITRE
ORDER BY Qte DESC;


--Mqke a rank to implement the classement
CREATE OR REPLACE VIEW BEST_SELLERS
AS
	SELECT ISBN,TITRE,rank, vente,CASE WHEN rank <= 55 THEN 1 ELSE 0 END AS BEST_SELLERS 
	FROM
	(
		SELECT  p.ISBN AS ISBN,p.TITRE AS TITRE, RANK() OVER(ORDER BY COUNT(*) DESC) AS rank, COUNT(*) AS vente
		FROM f_dw_vente v, f_dw_catalogue p
		WHERE v.Product = p.ISBN
		GROUP BY p.ISBN,p.TITRE
	)
	WHERE rank<=100;

--Question 03
SET echo off 
SET termout off
SET feedback off
SET heading off
SET PAGESIZE 0
SPOOL ./Results/EX2_Q3.csv
SELECT m.BESTSELLER || ';' || bs.BEST_SELLERS || ';' || COUNT(*) || ';' FROM f_dw_vente v, f_dw_magasin m, BEST_SELLERS bs WHERE v.SHOP = m.Magasin_Id AND v.PRODUCT = bs.ISBN GROUP BY CUBE(m.BESTSELLER,bs.BEST_SELLERS);
SPOOL OFF


--Question 04

SELECT d.Semaine, SUM(COUNT(*)) OVER (ORDER BY d.Semaine ROWS UNBOUNDED PRECEDING)
FROM f_dw_vente v, f_dw_date d
WHERE v.TICKET_DATE = d.TRADE_DATE
GROUP BY d.Semaine;


--Question 05 
SELECT m.DPT_NAME,m.Magasin_Id,COUNT(*)
FROM f_dw_vente v, f_dw_magasin m
WHERE v.SHOP = m.Magasin_Id 
GROUP BY ROLLUP(m.DPT_NAME,m.Magasin_Id);













































